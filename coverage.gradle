/*
 * BALVI GmbH 2018
 */

apply(plugin: 'com.bmuschko.clover')

clover {
    report {
        html = true
        pdf = true
    }
}

def modulePrefix = 'app'
def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")


cloverAggregateReports.doLast {
    def xml = new XmlSlurper().parse(new File("./build/reports/clover/clover.xml"))
    def classesWithoutTest = xml.depthFirst().findAll {
        it.name() == 'class' &&
                it.metrics?.@coveredelements == 0 &&
                it.metrics?.@elements != 0
    }
    assert classesWithoutTest.size() == 0 : 'No coverage for Classes: ' + classesWithoutTest.collect{ it.@name  }

    def coveredelements = new Double(xml.project.metrics.@coveredelements.text())
    def elements = new Double(xml.project.metrics.@elements.text())
    double coverageRate = (100 * coveredelements / elements).trunc(2)
    println "Coverage rate: ${coverageRate}%"
}

configure([globalModule, coreModule, webModule]) {
    apply(plugin: 'com.bmuschko.clover')

    dependencies {
        clover 'org.openclover:clover:4.2.0'
    }


    clover {
//        classesBackupDir = file("${sourceSets.main.classesDir}-backup")

        // Now optional licenseLocation since we support OpenClover
//        licenseLocation = 'clover-license.txt'
//        excludes = ['**/SynchronizedMultiValueMap.java']

        testIncludes = ['**/*Test.java', '**/*Spec.groovy']
        testExcludes = ['**/Mock*.java']

        targetPercentage = '95%'

        // Closure based syntax for additionalSourceSets and
        // additionalTestSourceSets is also supported. Both
        // srcDirs and classesDir properties are required.
        // The syntax allows the following to occur as many times
        // as necessary to define each additional sourceSet.
//        additionalSourceSet {
//            srcDirs = sourceSets.generatedJava.allSource.srcDirs
//            classesDir = sourceSets.generatedJava.output.classesDir
//        }
//        additionalTestSourceSet {
//            srcDirs = sourceSets.integrationTest.allSource.srcDirs,
//            classesDir = sourceSets.integrationTest.output.classesDir
//        }

//        compiler {
//            encoding = 'UTF-8'
//
//            // if the javac executable used by ant should be the same as the one used elsewhere.
//            executable = file('/usr/local/java/jdk1.8.0_05')
//            // used to add debug information for Spring applications
//            debug = true
//            additionalArgs = '-parameters'
//        }

        contexts {
            statement {
                name = 'log'
                regexp = '^.*LOG\\..*'
            }

            method {
                name = 'main'
                regexp = 'public static void main\\(String args\\[\\]\\).*'
            }
            method {
                name = 'getters'
                regexp = 'public [^\\s]+ get[A-Z][^\\s]+\\(\\)'
                maxStatements = 1
            }
            method {
                name = 'setters'
                regexp = 'public void set[A-Z][^\\s]+\\(.+\\)'
                maxStatements = 1
            }
        }

        report {
            html = true
            pdf = false
            filter = 'log,main,getters,setters'

            // Support capturing test results from JUnix XML report
            testResultsDir = project.tasks.getByName('test').reports.junitXml.destination
            testResultsInclude = 'TEST-*.xml'

            // Clover report nested columns support
            columns {
                coveredMethods format: 'longbar', min: '75'
                coveredStatements format: '%'
                coveredBranches format: '%'
//                coveredBranches format: 'raw'
                totalPercentageCovered format: '%', scope: 'package'
            }

            // Clover history generation support
            // See Clover documentation for details of the values supported
            historical {
                enabled = true
                historyIncludes = 'clover-*.xml.gz'
                packageFilter = null
                from = null
                to = null

                added {
                    range = 10
                    interval = '3 weeks'
                }
                mover {
                    threshold = 1
                    range = 10
                    interval = '3 weeks'
                }
                mover {
                    threshold = 1
                    range = 10
                    interval = '3 months'
                }
                mover {
                    threshold = 1
                    range = 10
                    interval = '1 year'
                }
            }
        }
    }

}
